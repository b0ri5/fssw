import os

Import('env config_suffix')

"""
  Installs the library lib_path into third-party/lib and appends its
  configuration suffix 
"""
def install_library(lib_path):
  lib_basename = os.path.basename(lib_path)
  lib_name, lib_ext = os.path.splitext(lib_basename)
  
  return env.InstallAs('lib/' + lib_name + config_suffix + lib_ext, lib_path)

### gtest ###

def build_gtest(env, source):
  if env['CC'] == 'cl':
    return [File('lib/gtest' + config_suffix + '.lib'),
            File('lib/gtest_main' + config_suffix + '.lib')]
    
  cmake_files = env.Command('gtest-build/cmake_install.cmake',
                            '%s/CMakeLists.txt' % (source),
                            'cmake ../%s' % (source),
                            chdir='third-party/gtest-build')

  lib_names = ['gtest', 'gtest_main']
  lib_paths = []
  for name in lib_names:
    lib_paths.append('gtest-build/' +
                      env['LIBPREFIX'] + name + env['LIBSUFFIX'])
 
  env.Command(lib_paths, cmake_files,
                     'cmake --build gtest-build',
                     chdir='third-party')
  
  return [install_library(lib_path)[0] for lib_path in lib_paths]

env.AddMethod(build_gtest, 'BuildGtest')
libgtest = env.BuildGtest('gtest-1.5.0')

# just in case gtest was built with pthreads and we need to link with "pthread"
conf = Configure(env)
conf.CheckLib('pthread', language='C++', autoadd=1)  
env = conf.Finish()
 
Export('libgtest')
 

### gflags ###

def build_gflags(env, source):
  if env['CC'] == 'cl':
    return [File('lib/gflags' + config_suffix + '.lib')]
  
  makefile = env.Command('%s/Makefile' % (source),
                         '%s/configure' % (source),
                         './configure --enable-shared=no',
                         chdir='third-party/%s' % (source))
  
  lib_path = '%s/.libs/' % (source) + \
             env['LIBPREFIX'] + 'gflags' + env['LIBSUFFIX']
  
  env.Command('%s/.libs/' % (source) +
                          env['LIBPREFIX'] + 'gflags' + env['LIBSUFFIX'],
                          makefile,
                          'make',
                          chdir='third-party/%s' % (source))
  
  return install_library(lib_path)

env.AddMethod(build_gflags, 'BuildGflags')
libgflags = env.BuildGflags('gflags-1.3')

Export('libgflags')